########### THIS CODE IS GENERATED BY AI 



import pandas as pd
import numpy as np
from sklearn.datasets import make_classification
import random

# Set random seed for reproducibility
np.random.seed(42)
random.seed(42)

# Generate base dataset
n_samples = 25000  # 25k samples for good balance of complexity and manageability
n_features = 15
n_informative = 10
n_redundant = 3
n_clusters_per_class = 2

X, y = make_classification(
    n_samples=n_samples,
    n_features=n_features,
    n_informative=n_informative,
    n_redundant=n_redundant,
    n_clusters_per_class=n_clusters_per_class,
    class_sep=0.8,
    random_state=42
)

# Create DataFrame with meaningful column names for customer churn prediction
feature_names = [
    'account_length', 'total_day_minutes', 'total_day_calls', 'total_day_charge',
    'total_eve_minutes', 'total_eve_calls', 'total_eve_charge',
    'total_night_minutes', 'total_night_calls', 'total_night_charge',
    'total_intl_minutes', 'total_intl_calls', 'total_intl_charge',
    'customer_service_calls', 'monthly_charges'
]

df = pd.DataFrame(X, columns=feature_names)
df['churn'] = y

# Transform features to make them more realistic
df['account_length'] = np.abs(df['account_length'] * 50 + 100).astype(int)  # 0-400 days
df['total_day_minutes'] = np.abs(df['total_day_minutes'] * 100 + 150)  # 0-500 minutes
df['total_day_calls'] = np.abs(df['total_day_calls'] * 30 + 50).astype(int)  # 0-200 calls
df['total_day_charge'] = df['total_day_minutes'] * 0.17 + np.random.normal(0, 5, n_samples)

df['total_eve_minutes'] = np.abs(df['total_eve_minutes'] * 80 + 120)
df['total_eve_calls'] = np.abs(df['total_eve_calls'] * 25 + 40).astype(int)
df['total_eve_charge'] = df['total_eve_minutes'] * 0.14 + np.random.normal(0, 3, n_samples)

df['total_night_minutes'] = np.abs(df['total_night_minutes'] * 90 + 100)
df['total_night_calls'] = np.abs(df['total_night_calls'] * 20 + 30).astype(int)
df['total_night_charge'] = df['total_night_minutes'] * 0.09 + np.random.normal(0, 2, n_samples)

df['total_intl_minutes'] = np.abs(df['total_intl_minutes'] * 15 + 5)
df['total_intl_calls'] = np.abs(df['total_intl_calls'] * 8 + 2).astype(int)
df['total_intl_charge'] = df['total_intl_minutes'] * 0.27 + np.random.normal(0, 1, n_samples)

df['customer_service_calls'] = np.abs(df['customer_service_calls'] * 2 + 1).astype(int)
df['monthly_charges'] = np.abs(df['monthly_charges'] * 30 + 70)

# Add categorical features
states = ['CA', 'NY', 'TX', 'FL', 'IL', 'PA', 'OH', 'GA', 'NC', 'MI', 'NJ', 'VA', 'WA', 'AZ', 'MA', 'TN', 'IN', 'MO', 'MD', 'WI']
df['state'] = np.random.choice(states, n_samples)

area_codes = [415, 408, 510, 650, 925, 949, 714, 562, 626, 818, 213, 323, 310, 424]
df['area_code'] = np.random.choice(area_codes, n_samples)

df['international_plan'] = np.random.choice(['yes', 'no'], n_samples, p=[0.1, 0.9])
df['voice_mail_plan'] = np.random.choice(['yes', 'no'], n_samples, p=[0.3, 0.7])

# Add some derived features that might be useful
df['total_minutes'] = df['total_day_minutes'] + df['total_eve_minutes'] + df['total_night_minutes'] + df['total_intl_minutes']
df['total_calls'] = df['total_day_calls'] + df['total_eve_calls'] + df['total_night_calls'] + df['total_intl_calls']
df['total_charges'] = df['total_day_charge'] + df['total_eve_charge'] + df['total_night_charge'] + df['total_intl_charge']
df['avg_call_duration'] = df['total_minutes'] / (df['total_calls'] + 1)  # +1 to avoid division by zero

# Create customer segments based on usage patterns
def assign_customer_segment(row):
    if row['total_minutes'] > 400 and row['monthly_charges'] > 80:
        return 'high_value'
    elif row['total_minutes'] < 150 and row['monthly_charges'] < 50:
        return 'low_usage'
    elif row['customer_service_calls'] > 3:
        return 'high_maintenance'
    else:
        return 'regular'

df['customer_segment'] = df.apply(assign_customer_segment, axis=1)

# Introduce realistic outliers (about 2% of data)
outlier_indices = np.random.choice(df.index, size=int(0.02 * len(df)), replace=False)

for idx in outlier_indices:
    # Random extreme values
    if np.random.random() < 0.3:
        df.loc[idx, 'total_day_minutes'] *= np.random.uniform(5, 15)
    if np.random.random() < 0.3:
        df.loc[idx, 'customer_service_calls'] = np.random.randint(8, 20)
    if np.random.random() < 0.3:
        df.loc[idx, 'monthly_charges'] *= np.random.uniform(3, 8)
    if np.random.random() < 0.2:
        df.loc[idx, 'total_intl_calls'] = np.random.randint(50, 150)

# Introduce missing values (about 5-8% across different columns)
missing_patterns = {
    'monthly_charges': 0.03,
    'total_intl_minutes': 0.05,
    'total_intl_calls': 0.05,
    'customer_service_calls': 0.02,
    'voice_mail_plan': 0.04,
    'customer_segment': 0.03,
    'avg_call_duration': 0.06,
    'area_code': 0.02
}

for col, missing_rate in missing_patterns.items():
    missing_indices = np.random.choice(
        df.index, 
        size=int(missing_rate * len(df)), 
        replace=False
    )
    df.loc[missing_indices, col] = np.nan

# Add some data quality issues
# Inconsistent categorical values
inconsistent_indices = np.random.choice(df.index, size=int(0.01 * len(df)), replace=False)
df.loc[inconsistent_indices[:len(inconsistent_indices)//2], 'international_plan'] = 'Yes'  # Capital Y
df.loc[inconsistent_indices[len(inconsistent_indices)//2:], 'voice_mail_plan'] = 'No'   # Capital N

# Add customer ID
df['customer_id'] = ['CUST_' + str(i).zfill(6) for i in range(1, len(df) + 1)]

# Reorder columns to put ID first and target last
columns_order = ['customer_id'] + [col for col in df.columns if col not in ['customer_id', 'churn']] + ['churn']
df = df[columns_order]

# Round numerical columns to reasonable decimal places
numerical_cols = df.select_dtypes(include=[np.number]).columns
for col in numerical_cols:
    if col not in ['customer_service_calls', 'total_day_calls', 'total_eve_calls', 'total_night_calls', 'total_intl_calls', 'total_calls', 'area_code', 'account_length', 'churn']:
        df[col] = df[col].round(2)

# Save to CSV
df.to_csv('customer_churn_dataset.csv', index=False)

print(f"Dataset created successfully!")
print(f"Shape: {df.shape}")
print(f"\nTarget distribution:")
print(df['churn'].value_counts())
print(f"\nMissing values per column:")
print(df.isnull().sum()[df.isnull().sum() > 0])
print(f"\nFirst few rows:")
print(df.head())
print(f"\nDataset saved as 'customer_churn_dataset.csv'")

# Display basic statistics
print(f"\nBasic statistics:")
print(df.describe())

print(f"\nCategorical columns unique values:")
categorical_cols = df.select_dtypes(include=['object']).columns
for col in categorical_cols:
    if col != 'customer_id':
        print(f"{col}: {df[col].nunique()} unique values")
        print(f"  Values: {df[col].value_counts().head().to_dict()}")